package Photogram.restful.controller;
//file upload
import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestPart;

import Photogram.restful.storage.StorageService;
import Photogram.restful.repository.*;
import Photogram.restful.message.*;
import Photogram.restful.dto.*;
import Photogram.restful.forms.*;

import java.util.Optional;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

@Controller // This means that this class is a Controller
@RequestMapping(path="/photogram") // This means URL's start with /demo (after Application path)
public class PhotogramController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @Autowired
  private PostRepository postRepository;

  @Autowired
  private LikeRepository likeRepository;

  @Autowired
  private FollowRepository followRepository;

  @Autowired
  private StorageService storageService;

  @PostMapping(path="/api/users/register", consumes = {"multipart/form-data"}) // Map ONLY POST Requests
   /*
  public @ResponseBody Message addNewUser (@Valid @RequestParam String firstname,
    @RequestParam String lastname,  @RequestParam String username,  @RequestParam String password,
    @RequestParam String email,  @RequestParam String location,  @RequestParam String biography,
  */
  public @ResponseBody Message addNewUser(@Valid @RequestPart("user") UserForm form,
                      @RequestPart("profile_photo") @NotNull MultipartFile profile_photo  
  /*
  @RequestParam("user.profile_photo") MultipartFile profile_photo
  */
  ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    SimpleDateFormat formatter = new SimpleDateFormat("dd MMMM y");;
    Date date = new Date();
    String joined_on = formatter.format(date);
    String filename = storageService.store(profile_photo);
    
    User u = new User(form.getFirstname(), form.getLastname(), form.getUsername(), 
      form.getPassword(), form.getEmail(), form.getLocation(), form.getBiography(), 
      filename, joined_on);
    /*
    u.setJoined_on(joined_on);
    u.setProfile_photo(filename);
    */
    userRepository.save(u);
    return new Message("User successfully registered");
  }

  @PostMapping(path="/api/users/user_id/post") //Map only POST Requests
  public @ResponseBody Message newPost(@Valid @RequestBody Post p) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
        postRepository.save(p);
        return new Message("Successfully created new post");
    }

  @PostMapping(path="/api/users/user_id/follow") //Map only POST Requests
  public @ResponseBody Message newFollow(@Valid @RequestBody Follow f) {
        followRepository.save(f);
        return new Message("You are now following that user");
    }

  @PostMapping(path="/api/posts/{postId}/like") //Maps only to POST Requests
  public @ResponseBody LikeMessage newLike(@PathVariable("postId") @Min(1) Integer postId, 
    @Valid @RequestBody Like l) {
      likeRepository.save(l);
      Integer likes = likeRepository.findByPostId(postId).size();
      return new LikeMessage("Post liked!", likes);
  }

  @GetMapping(path="/allUsers")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @GetMapping(path="/api/users/{userId}")
  public @ResponseBody Optional<User> getUser(@PathVariable("userId") @Min(1) Integer userId) {
    // This returns a JSON or XML with the users
    return userRepository.findById(userId);
  }

  @GetMapping(path="/api/posts")
  public @ResponseBody Iterable<Post> getAllPosts() {
    // This returns a JSON or XML with the users
    return postRepository.findAll();
  }

  @GetMapping(path="/api/users/{userId}/posts")
  public @ResponseBody Iterable<Post> getUserPosts(@PathVariable("userId") @Min(1) Integer userId) {
    // This returns a JSON or XML with the users
    return postRepository.findByUserId(userId);
  }

  @GetMapping(path="/allFollows")
  public @ResponseBody Iterable<Follow> getAllFollows() {
    // This returns a JSON or XML with the users
    return followRepository.findAll();
  }

  @GetMapping(path="/api/users/{userId}/follow")
  public @ResponseBody FollowCount getFollowers(@PathVariable("userId") @Min(1) Integer userId) {
    // This returns a JSON or XML with the users
    Integer follows = followRepository.findByUserId(userId).size();
    return new FollowCount(follows);
  }

  @GetMapping(path="/allLikes")
  public @ResponseBody Iterable<Like> getAllLikes() {
    // This returns a JSON or XML with the users
    return likeRepository.findAll();
  }
}